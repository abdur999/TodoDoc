*To Check git version
git --version

*Git update
git clone https://github.com/git/git

*Setting git email and userid
git config --global user.email abdursrahims@icloud.com
git config --global user.name abdur999

*Create Git 
*Visit to the path
cd 'path'
*init
git init

*Check git status
git status

*Git add files
git add --all

*Remove file from git
git rm Readme/readme.md.rtf

*Commit the changes
git commit -m "swift Data Structure, Threading, Collections, Generics, Language Specific things"

*Git add files
git add *.*
Git add *.txt

*Git add everything including files and folders
git add .

*git remote add origin
*Create a repository in your git account and copy the url (https/ssh)
git remote add origin https://github.com/abdur999/SwiftAlgoDsTestCaseGeneric.git

*or When we need to change the url
git remote set-url origin git@github.com:abdur999/SwiftAlgoDsTestCaseGeneric.git
git branch -M main

*git push
git push -u origin main

*git log
git log

* git help 
Git --help

*git ignore
*create .gitignore (in the top directory)
touch .gitignore
open -a TextEdit .gitignore  
*add the necessary files and save it will ignore that file

*add a file in git
git add .gitignore





*get all ssh key 
ls -al ~/.ssh

*add ssh key
ssh-keygen -t ed25519 -C "abdursrahims@icloud.com"

*Don't add any file name by the way it save in the same directory
*Don't add any passphrase

*for check run.  The command
ls -al ~/.ssh
*or
sudo ~/.ssh
*or
cd /Users/abdurrahim/.ssh
ls

*open file in Mac with textedit
open -a TextEdit id_ed25519.pub

*ssh key generation command
ssh-keygen -t ed25519 -C "abdursrahims@icloud.com"
*don't put any path it will create default path and save

*don't put any pass phrase it ask pass phrase for two times

*to check authentication
ssh -T git@github.com

*Are you sure you want to continue connecting (yes/no/[fingerprint])? Type
yes

*NEW project add into git below commands until space continued
cd /Users/abdurrahim/Downloads/UniversitiesGlobal
pod init
git remote add origin git@github.com:abdur999/MVVMDemo.git
git add --all 
git commit -m "MVVM Structure"
git branch -M main
git fetch origin main
git push -u origin main

*Force push

git push --force origin main 


*Changes not staged for commit:(commit all files)

git commit -a


*command will revert uncommitted changes that exist in files that have been added to the index, *whether those files are newly created files, or files that were added to the index i

git reset â€“hard



*if any new files have been created in the Git repository that have never been added to the index, *these files will remain in the project folder after the hard reset. To remove these files, the git *clean -fxd command is needed.

git clean -fxd

*Stash Work

*Create a Git Stash
*If you decide to stash untracked and ignored files, add the --all or --include-untracked option.
git stash --all

*Create a Partial Stash
git stash --patch

*The command applies the stashed changes. Alternatively, apply the stashed changes to a new branch using the following syntax:
git branch [branch_name] [stash_hash]

*Restore Deleted Stash
git stash apply [stash_hash]

*Obtain Stash Commit Hash
git stash pop


*Drop All Git Stashes
git stash clear

*Drop All Git Stashes
git stash clear

*List all stash
git stash list

*Drop a Specific Stash in Git
git stash drop stash@{n}

*Drop the Most Recent Stash
git stash drop
 
*How to Drop a Git Stash

*The command restores the changes but doesn't delete the stash from the ref.
git stash pop
*The command restores the changes and schedules the stash for deletion.
git stash apply

*How to Ignore Files Manually
*Personal Git ignore rules
*Create a file named .gitignore if you do not have it already in your directory. To create a file, *use the command touch or cat. It will use as follows:
touch .gitignore  
cat .gitignore

git add .gitignore  
git commit -m "ignored directory created."  

*Global .gitignore:
git config --global core.excludesfile ~/.gitignore_global  

*List the Ignored Files
git ls-files -i --exclude-standard  

